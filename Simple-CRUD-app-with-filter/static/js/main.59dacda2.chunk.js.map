{"version":3,"sources":["components/App/App.js","index.js"],"names":["App","state","counter","list","currentValue","filterTypes","filter","editMode","onChangeInput","value","target","setState","onSubmit","id","todo","done","onDeleteTodo","onChangeCheckbox","map","filterResult","type","onEditMode","onSaveChanges","onCancelButton","this","result","renderList","key","onClick","defaultChecked","className","style","textDecoration","onChange","placeholder","length","justifyContent","Component","render","document","getElementById"],"mappings":"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","file":"static/js/main.59dacda2.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport './App.css';\n\nexport class App extends Component {\n  state = {\n    counter: null,\n    list: [],\n    currentValue: '',\n    filterTypes: ['all', 'not done', 'done'],\n    filter: 'all',\n    editMode: null,\n  };\n\n  onChangeInput = ({target: {value}}) => {\n    this.setState(() =>({\n      currentValue: value\n    }));\n  };\n\n  onSubmit = () => {\n    this.setState(({counter, list, currentValue}) => ({\n      counter: ++counter,\n      list: [\n        ...list,\n        {id: counter, todo: currentValue, done: false},\n      ],\n      currentValue: '',\n    }));\n  };\n\n  onDeleteTodo = id => {\n    this.setState(({list}) => ({\n      list: list.filter(todo => todo.id !== id)\n    }));\n  };\n\n  onChangeCheckbox = id => {\n    this.setState(({list}) => ({\n      list: list.map(todo => todo.id === id ? {...todo, done: !todo.done} : todo)\n    }));\n  };\n\n  filterResult = type => {\n    this.setState(() => ({\n      filter: type\n    }));\n  };\n\n  onEditMode = ({todo, id}) => {\n    this.setState(() => ({\n      editMode: {todo, id},\n      currentValue: todo\n    }));\n  };\n\n  onSaveChanges = id => {\n    this.setState(({list, currentValue}) => ({\n      list: list.map(todo => todo.id === id ? {...todo, todo: currentValue} : todo),\n      currentValue: '',\n      editMode: null,\n    }));\n  };\n\n  onCancelButton = () => {\n    this.setState(() => ({\n      currentValue: '',\n      editMode: null,\n    }))\n  }\n\n  render() {\n    const {list, currentValue, filter, filterTypes, editMode} = this.state;\n    let result = [];\n    \n    if (filter === 'all') result = list;\n    if (filter === 'not done') result = list.filter(({done}) => !done);\n    if (filter === 'done') result = list.filter(({done}) => done);\n\n    const renderList = result.map(({id, todo, done}) => (\n      <li key={id}>\n        {\n          editMode === null\n            && \n              <>\n                <input type='checkbox' onClick={() => this.onChangeCheckbox(id)} defaultChecked={done} />\n                <span className='list-text' style={{textDecoration: done ? 'line-through' : 'none'}}>\n                  {todo}\n                </span>\n                <span className='right'>\n                  <button onClick={() => this.onEditMode({todo, id})}>Edit</button>\n                  <button onClick={() => this.onDeleteTodo(id)}>Delete</button>\n                </span>\n              </>\n        }\n      </li>\n    ));\n\n    return (\n      <div className='app'>\n        <div className='input'>\n          {editMode === null\n            ? \n              <>\n                <div className='search'>\n                  <input className='text-field' type='text' onChange={this.onChangeInput} value={currentValue} placeholder='Please add Todo...' />\n                  {currentValue.length > 3 && <button onClick={this.onSubmit}>ADD</button>}\n                </div>\n                \n                <div className='filter'>\n                  {filterTypes.map(type => (\n                    <button key={type} onClick={() => this.filterResult(type)}>{type}</button>\n                  ))}\n                </div>\n              </>\n            :\n              <div className='edit-mode'>\n                <input  className='text-field' type='text' onChange={this.onChangeInput} value={currentValue} />\n                <button onClick={() => this.onCancelButton()}>Cancel</button>\n                <button onClick={() => this.onSaveChanges(editMode.id)}>Save</button>\n              </div>\n          }\n        </div>\n\n        <ul>\n          { renderList.length === 0 \n              ? <li style={{justifyContent: 'center'}}>please add Todo</li> \n              : editMode === null\n                ? renderList \n                : <li>Edit mode: {currentValue}</li> }\n        </ul>\n      </div>\n    );\n  };\n};","import React from 'react';\nimport { render } from 'react-dom';\nimport { App } from './components/App/App';\n\nrender(<App />, document.getElementById('root'));"],"sourceRoot":""}